# Jazz command line preference file.
# General format: 
# - lines starting with "#" are comments
# - Assignment are of the form <key>: <value>


# Repository Connection Timeout
# 
# Sets the connection timeout for contacting the repository. This is used to 
# determine how long to wait when connecting to the remote repository. 
# 
# The value must be an integer number of seconds.
# 
# The following would set the connection timeout to 10 minutes:
# repository.timeout: 600


# Default Password Mask
# 
# Controls whether the password prompt should attempt to mask user typing. 
# 
# Value may be either "true", indicating that the password should be masked, or 
# any other value to indicate that it should not. 
# 
# The following causes password keystrokes to be echoed when typed.
# password.mask: false
password.mask: true


# Content Download Threads
# 
# The command line client will use multiple threads to download content when 
# possible. This value sets the maximum number of threads to use. 
# 
# The value must be a positive integer.
# 
# The following tells the client to download up to 25 different items at a time.
# content.threads: 25
content.threads: 25


# Maximum Check In Grouping
# 
# Sets the maximum number of changes that will be committed as an atomic group. If 
# any single file upload fails in a commit smaller than this number, the entire 
# check in will fail, and no changes will be recorded in the repository workspace. 
# 
# The value must be a positive integer.
# 
# The following sets the failure grouping to 10. If less than ten files are 
# checked in at once, and one upload fails, no change set is modified. If ten or 
# more files are check in, and one upload fails the remaining changes are stored 
# in a change set. 
# commit.atomic.maximum: 10


# Dump exception on console.
# 
# This value is used only in case of default logging. 
# If the value is set to false, then the exceptions will only be logged.
# If the value is set to true, then the exceptions will be dumped on console in 
# addition to logging it. 
dump.exception: false


# Logging level.
# 
# This value is used only in case of default logging. 
# The levels in descending order are:
# SEVERE (highest value)
# WARNING
# INFO
# CONFIG 
# FINE
# FINER
# FINEST (lowest value)
# 
# By default, logging level is set to SEVERE. This is to done to avoid bloating 
# the disk with logs. 
# log.level: SEVERE


# Disable Daemon Tracing
# 
# By default the SCM daemon records all interactions with clients for debugging 
# purposes. 
# The log can be disabled by setting the trace.disable configuration field.
# "true" and "false" are legal values.
# 
# The following disables trace logging.
# trace.disable: true


# Daemon Trace Directory
# 
# By default the daemon records traces into a location within the configuration 
# directory. The default configuration location is the user's home directory 
# unless explicitly overridden using the --config option or SCM_CONFIG_DIRECTORY 
# environment variable. The trace location can be changed by setting this value. 
# 
# Any valid file system path may be used.
# trace.dir: /home/user/traces/


# Maximum Daemon Trace File Size
# 
# The daemon will rotate the trace file after it reaches a maximum size. 
# Subsequent interactions will be recorded in a new file. 
# 
# Any positive integer value may be used.
# 
# The following causes the trace file to rotate after it reaches 50 kilobytes in 
# size. 
# trace.file.max_size: 50000
trace.file.max_size: 80000


# Daemon Trace File Compression
# 
# By default, the daemon compresses the trace file when rotating it. This value 
# controls whether the compression should occur. Except in cases where performance 
# is negatively impacted, or where the trace file size is extremely large, 
# compression should be enabled. 
# 
# "true" and "false" are legal values.
# 
# The following will disable compression.
# trace.file.compress: false
trace.file.compress: true


# Maximum Daemon Trace Directory Size
# 
# The daemon will delete old trace files when the trace directory reaches a 
# certain size. This value controls how large the total sum of trace file sizes 
# may be before deletion occurs. 
# 
# Note: trace files are only purged after a trace file is being rotated.
# 
# Any positive integer may be used.
# 
# The follow will cause trace files to be deleted after the trace directory 
# exceeds 800 kilobytes. 
# trace.dir.max_size: 800000
trace.dir.max_size: 2000000


# JSON Output
# 
# Setting this preference to true enables the JSON output for commands.
# 
# The following will enable JSON output.
# json.output: true


# Preoperation Refresh Policy
# 
# Setting this preference to "true" makes the CLI commands automatically refresh 
# the file system to identify any new local changes before reading and modifying 
# the files in the file system. When this preference is set to "false" you can 
# refresh the file system by running the refresh command. 
# 
# When this preference is set to "true" CLI commands that modify files in the file 
# system warn the user about any uncommitted changes. The warnings can add time to 
# the process, but help protect the files. 
# 
# When this preference is set to "false" CLI commands do not warn the user about 
# any uncommitted changes and copy any colliding changes to Jazz backup shed. 
refresh.local.changes: false


# Date Format
# 
# CLI commands will use this format to display the date and time. You can specify 
# any simple date format. For details, see 
# http://java.sun.com/j2se/1.5.0/docs/api/java/text/SimpleDateFormat.html. The 
# preset CLI date format is used by default and default locale date format will be 
# used if this preference is set to "locale". 


# External 2-way compare tool
# 
# Format: <full path to the executable> <options>
# Note: Some characters such as " or $ might have a special meaning in certain 
# operating systems and you might need to use escape characters to represent them. 
# 
# Examples:
# Beyond Compare
# external.compare.2way: bcompare ${file1Path} ${file2Path} -title1="${file1Title}" -title2="${file2Title}" -rightreadonly
# ClearCase Diff Merge
# external.compare.2way: xcleardiff "${file1Path}" "${file2Path}"
# DiffMerge
# external.compare.2way: diffmerge -ro1 -title2="${file1Title}" -title1="${file2Title}" ${file2Path} ${file1Path}
# KDiff3
# external.compare.2way: kdiff3 ${file1Path} ${file2Path} --L1 "${file1Title}" --L2 "${file2Title}" --output ${mergeFilePath}
# P4Merge
# external.compare.2way: p4merge -nl "${file1Title}" -nr "${file2Title}" ${file1Path} ${file2Path}
# WinMerge
# external.compare.2way: 


# External 3-way compare tool
# 
# Format: <full path to the executable> <options>
# This tool compares items that have conflicts. If this tool is not configured, 
# the 2-way compare tool is used by default. 
# Note: Some characters such as " or $ might have a special meaning in certain 
# operating systems and you might need to use escape characters to represent them. 
# 
# Examples:
# Beyond Compare
# external.compare.3way: bcompare ${file1Path} ${file2Path} ${ancestorFilePath} ${mergeFilePath} -title1="${file1Title}" -title2="${file2Title}" -title3="${ancestorFileTitle}" -title4="${mergeFileTitle}"
# ClearCase Diff Merge
# external.compare.3way: xcleardiff -base "${ancestorFilePath}" -out "${mergeFilePath}" "${file1Path}" ${file2Path}
# DiffMerge
# external.compare.3way: diffmerge -result="${mergeFilePath}" -title1="${file1Title}" -title2="${ancestorFileTitle}" -title3="${file2Title}" ${file1Path} ${ancestorFilePath} ${file2Path}
# KDiff3
# external.compare.3way: kdiff3 ${ancestorFilePath} ${file1Path} ${file2Path} --L1 "${ancestorFileTitle}" --L2 "${file1Title}" --L3 "${file2Title}" --output ${mergeFilePath}
# P4Merge
# external.compare.3way: p4merge -nb "${ancestorFileTitle}" -nl "${file1Title}" -nr "${file2Title}" -nm "${mergeFileTitle}" ${ancestorFilePath} ${file1Path} ${file2Path} ${mergeFilePath}
# WinMerge
# external.compare.3way: 

